{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","Default","sortType","setSortType","direction","setDirection","sortedGoods","goods","goodsCopy","sort","good1","good2","ByAlpf","localeCompare","ByLength","length","reverse","sortGoods","className","type","classNames","button","onClick","Reverse","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,WAAAA,E,kBAAAA,E,cAAAA,E,oBAAAA,M,KAwCE,IAAME,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,SAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCH,mBAASH,EAASI,SAApD,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMC,EAhCR,SACEC,EADF,GAGa,IADTL,EACQ,EADRA,SAAUE,EACF,EADEA,UAENI,EAAS,YAAOD,GAqBtB,OAnBIL,GACFM,EAAUC,MAAK,SAACC,EAAOC,GACrB,OAAQT,GACN,KAAKL,EAASe,OACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAASiB,SACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXX,GACFI,EAAUQ,UAGLR,EAOaS,CAClBnB,EACA,CAAEI,WAAUE,cAQd,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,CACpB,WAAYlB,IAAaL,EAASe,OAClCS,QAAQ,EACR,WAAW,IAEbC,QAAS,kBAAMnB,EAAYN,EAASe,SAPtC,iCAYA,wBACEO,KAAK,SACLD,UAAWE,IAAW,CACpB,WAAYlB,IAAaL,EAASiB,SAClCO,QAAQ,EACR,cAAc,IAEhBC,QAAS,kBAAMnB,EAAYN,EAASiB,WAPtC,4BAYA,wBACEK,KAAK,SACLD,UAAWE,IAAW,CACpB,WAAYhB,IAAcP,EAAS0B,QACnCF,QAAQ,EACR,cAAc,IAEhBC,QAAS,kBAAMjB,EACbD,IAAcP,EAASI,QACnBJ,EAAS0B,QACT1B,EAASI,UAVjB,sBAgBEC,IAAaL,EAASI,SAAWG,IAAcP,EAASI,UAEtD,wBACEkB,KAAK,SACLD,UAAU,4BACVI,QArDE,WACZnB,EAAYN,EAASI,SACrBI,EAAaR,EAASI,UAgDd,sBAUN,6BACGK,EAAYkB,KAAI,SAAAC,GAAI,OACnB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YC/HnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.fe51a5d3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Default = '',\n  ByLength = 'length',\n  ByAlpf = 'alph',\n  Reverse = 'reversed',\n}\n\ntype Sorted = {\n  sortType: SortType,\n  direction: SortType,\n};\n\nfunction sortGoods(\n  goods: string[],\n  { sortType, direction }: Sorted,\n): string[] {\n  const goodsCopy = [...goods];\n\n  if (sortType) {\n    goodsCopy.sort((good1, good2) => {\n      switch (sortType) {\n        case SortType.ByAlpf:\n          return good1.localeCompare(good2);\n\n        case SortType.ByLength:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (direction) {\n    goodsCopy.reverse();\n  }\n\n  return goodsCopy;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.Default);\n  const [direction, setDirection] = useState(SortType.Default);\n\n  const sortedGoods = sortGoods(\n    goodsFromServer,\n    { sortType, direction },\n  );\n\n  const reset = () => {\n    setSortType(SortType.Default);\n    setDirection(SortType.Default);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames({\n            'is-light': sortType !== SortType.ByAlpf,\n            button: true,\n            'is-info': true,\n          })}\n          onClick={() => setSortType(SortType.ByAlpf)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames({\n            'is-light': sortType !== SortType.ByLength,\n            button: true,\n            'is-success': true,\n          })}\n          onClick={() => setSortType(SortType.ByLength)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames({\n            'is-light': direction !== SortType.Reverse,\n            button: true,\n            'is-warning': true,\n          })}\n          onClick={() => setDirection(\n            direction === SortType.Default\n              ? SortType.Reverse\n              : SortType.Default,\n          )}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.Default || direction !== SortType.Default)\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={reset}\n            >\n              Reset\n            </button>\n          )}\n      </div>\n\n      <ul>\n        {sortedGoods.map(good => (\n          <li key={good} data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}